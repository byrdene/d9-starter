<?php

/**
 * @file
 * Contains project_utilities.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_help().
 */
function project_utilities_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the project_utilities module.
    case 'help.page.project_utilities':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Customizations to every Theory One Design Drupal 8 build.') . '</p>';
      return $output;

  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */

function project_utilities_form_views_exposed_form_alter(&$form, $form_state, $form_id) {

  $view = $form_state->get('view');

  if ($form_id == 'views_exposed_form') {

    // Add a class to the form if any of the exposed filters have a value
    // This is useful for isolating styles setting focus based on whether or not the user
    // has submitted the exposed form
    // The code is based on ExposedFormPluginBase.php in the Views module,
    // specifically the public function, exposedFormAlter()
    $exposed_filters = [];
    foreach ($view->filter as $id => $handler) {
      if ($handler->canExpose() && $handler->isExposed() && !empty($handler->options['expose']['identifier'])) {
        $exposed_filters[$handler->options['expose']['identifier']] = $id;
      }
    }
    if (array_intersect_key($exposed_filters, $view->getExposedInput())) {
      $form['#attributes']['class'][] = 'form-active-filters';
    }

    // Add classes (needed for theming and working with ajax)
    $form['keys']['#attributes']['class'][] = 'form-item--id-keys';
    $form['keyword-filter']['#attributes']['class'][] = 'form-item--id-keyword-filter';
    $form['combine']['#attributes']['class'][] = 'form-item--id-combine';

    // Uncomment and Accessibility improvements
//    $calendar = $form["#id"] == "views-exposed-form-calendar-page-1";
//    $news = $form["#id"] == "views-exposed-form-news-ideas-page-1";
//    $faculty = $form["#id"] == "views-exposed-form-faculty-staff-directory-page-1";
//
//    if ($calendar) {
//      $form['#attributes']['aria-label'] = 'Calendar Search';
//    }
//    if ($news) {
//      $form['#attributes']['aria-label'] = 'News Search';
//    }
//    if ($faculty) {
//      $form['#attributes']['aria-label'] = 'Faculty & Staff Search';
//    }

  }
}

/**
 * Implements hook_form_alter().
 */
function project_utilities_form_alter(&$form, &$form_state, $form_id) {

  // Kill the redundant help message under the login username/password fields.
  if ($form_id == 'user_login_form') {
    unset($form['name']['#description']);
    unset($form['pass']['#description']);
  }

  // Hide access to fields
  $user_role = \Drupal::currentUser()->getRoles();
  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $uid = $user->get('uid')->value;
  if (($uid == 1) || (in_array('developer', $user_role))) {
    $form['field_related_view']['#access'] = TRUE;
  }
  else {
    $form['field_related_view']['#access'] = FALSE;
  }

}

/**
 * Implements hook_field_widget_form_alter().
 * Open the summary text by default. (A simplified version of https://www.drupal.org/project/text_summary_options)
 */
function project_utilities_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  // Base fields are not configurable.
  if (!$field_definition instanceof FieldConfig) {
    return;
  }
  // We can't use the protected isDefaultValueWidget() method.
  $is_default_value_widget = (bool) $form_state->get('default_value_widget');
  if ($field_definition->getType() == 'text_with_summary' && !$is_default_value_widget) {
    unset($element['summary']['#attached']);
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 * Pasting text into full_html format should come in unformatted
* The height of the editor window should be smaller
 */
function project_utilities_editor_js_settings_alter(array &$settings) {
  if (!empty($settings['editor']['formats']['full_html'])) {
    $full_html = &$settings['editor']['formats']['full_html'];
    $full_html['editorSettings']['forcePasteAsPlainText'] = 'true';
    $full_html['editorSettings']['autoGrow_minHeight'] = '200';
  }

  // basic html format
  if (!empty($settings['editor']['formats']['basic_html'])) {
    $basic_html = &$settings['editor']['formats']['basic_html'];
    $basic_html['editorSettings']['forcePasteAsPlainText'] = 'true';
    $basic_html['editorSettings']['autoGrow_minHeight'] = '60';
  }
}


/**
 * Add image thumbnail to Inline Entity Form table.
 * After updating to Media in Core (and all supporting modules including Inline Entity Form),
 * the thumbnail no longer displayed by default.
 */
function project_utilities_inline_entity_form_table_fields_alter(&$fields, $context) {

// Add thumbnail to image and video media bundles
$bundles = ['image','video'];

if ($context['entity_type'] == 'media' && array_intersect($bundles, $context['allowed_bundles'])) {

    $fields['thumbnail'] = [
      'type' => 'field',
      'label' => t('Thumbnail'),
      'display_options' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => [
          'image_style' => 'thumbnail',
        ],
      ),
      'weight' => 10,
    ];

  }

  // If 'bundle' is set, reorder to first col
  if(isset($fields['bundle'])){
    $fields['bundle']['weight'] = 0;
  }

}
